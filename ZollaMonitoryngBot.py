import psycopg2
from psycopg2 import Error
import telebot
from telebot import types
import logging
from datetime import datetime
import os
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main(sql_update, sql_check):
    load_dotenv()

    BOT_TOKEN = os.getenv('BOT_TOKEN')
    CHAT_ID = os.getenv('CHAT_ID')

    DB_CONFIG = {
        "user": os.getenv('USER'),
        "password": os.getenv('PASSWORD'),
        "host": os.getenv('HOST'),
        "port": os.getenv('PORT'),
        "database": os.getenv('DATABASE'),
    }

    send_telegram_message(BOT_TOKEN, CHAT_ID, DB_CONFIG, sql_update, sql_check)



def send_telegram_message(BOT_TOKEN, CHAT_ID, DB_CONFIG, sql_update, sql_check):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if not BOT_TOKEN or not CHAT_ID:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã BOT_TOKEN –∏–ª–∏ CHAT_ID –≤ .env —Ñ–∞–π–ª–µ")
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        affected_rows, update_success = update_table(DB_CONFIG, sql_update)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        tables_status, problematic_tables, check_success = check_table_updates(DB_CONFIG, sql_check)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = telebot.TeleBot(BOT_TOKEN)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        check_message = format_check_message(tables_status, problematic_tables, check_success)
        if check_message:
            bot.send_message(CHAT_ID, check_message)

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {CHAT_ID}")
        return update_success and check_success

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            bot = telebot.TeleBot(BOT_TOKEN)
            error_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            bot.send_message(CHAT_ID, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {e}\n–í—Ä–µ–º—è: {error_time}")
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram")

        return False

def update_table(DB_CONFIG, sql_update):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    connection = None
    cursor = None
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        connection = psycopg2.connect(**DB_CONFIG)
        cursor = connection.cursor()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
        query = open(sql_update, 'r', encoding='utf-8').read()
        logger.info(f"–í—ã–ø–æ–ª–Ω—è—é sql —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {sql_update}")

        cursor.execute(query)
        affected_rows = cursor.rowcount
        connection.commit()

        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {affected_rows} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ monitoring_mart")
        return affected_rows, True

    except (Exception, psycopg2.Error) as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {error}")
        if connection:
            connection.rollback()
        return 0, False
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()


def check_table_updates(DB_CONFIG, sql_check):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
    connection = None
    cursor = None
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        connection = psycopg2.connect(**DB_CONFIG)
        cursor = connection.cursor()

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        query = open(sql_check, 'r', encoding='utf-8').read()
        logger.info(f"–í—ã–ø–æ–ª–Ω—è—é sql —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {sql_check}")

        cursor.execute(query)
        results = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü —Å —Ñ–ª–∞–≥–∞–º–∏
        tables_status = []
        problematic_tables = []

        for table_name, flag_update in results:
            status = "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è" if flag_update == 1 else "‚ùå –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            tables_status.append(f"{table_name}: {status}")

            if flag_update == 0:
                problematic_tables.append(table_name)

        logger.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(results)} —Ç–∞–±–ª–∏—Ü. –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: {len(problematic_tables)}")
        return tables_status, problematic_tables, True

    except (Exception, psycopg2.Error) as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {error}")
        return [], [], False
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()


def format_check_message(tables_status, problematic_tables, success=True):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if not success:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –Ω–∞ {current_time}"

    if not tables_status:
        return f"üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ {current_time}"

    if problematic_tables:
        message = f"üìä –û—Ç—á–µ—Ç –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Ç–∞–±–ª–∏—Ü –Ω–∞ {current_time}\n\n"
        message += "\n".join(tables_status)
        message += f"\n\nüìà –ò—Ç–æ–≥–æ: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(tables_status)} —Ç–∞–±–ª–∏—Ü"
        message += f"\n‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ({len(problematic_tables)}):\n"
        message += "\n".join([f"‚Ä¢ {table}" for table in problematic_tables])
        message += "\n\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ!"
    else:
        message = None

    return message





if __name__ == '__main__':
    main('sql_update.sql', 'sql_check.sql')